{"ast":null,"code":"var _excluded = [\"children\", \"className\", \"disabled\", \"disabledClassName\", \"focus\", \"id\", \"panelId\", \"selected\", \"selectedClassName\", \"tabIndex\", \"tabRef\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef } from 'react';\nimport cx from 'clsx';\nvar DEFAULT_CLASS = 'react-tabs__tab';\nvar DEFAULT_PROPS = {\n  className: DEFAULT_CLASS,\n  disabledClassName: DEFAULT_CLASS + \"--disabled\",\n  focus: false,\n  id: null,\n  panelId: null,\n  selected: false,\n  selectedClassName: DEFAULT_CLASS + \"--selected\"\n};\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  disabled: PropTypes.bool,\n  tabIndex: PropTypes.string,\n  disabledClassName: PropTypes.string,\n  focus: PropTypes.bool,\n  // private\n  id: PropTypes.string,\n  // private\n  panelId: PropTypes.string,\n  // private\n  selected: PropTypes.bool,\n  // private\n  selectedClassName: PropTypes.string,\n  tabRef: PropTypes.func\n} : {};\n\nvar Tab = function Tab(props) {\n  var _cx;\n\n  var nodeRef = useRef();\n\n  var children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      disabledClassName = props.disabledClassName,\n      focus = props.focus,\n      id = props.id,\n      panelId = props.panelId,\n      selected = props.selected,\n      selectedClassName = props.selectedClassName,\n      tabIndex = props.tabIndex,\n      tabRef = props.tabRef,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  useEffect(function () {\n    if (selected && focus) {\n      nodeRef.current.focus();\n    }\n  }, [selected, focus]);\n  return /*#__PURE__*/React.createElement(\"li\", _extends({}, attributes, {\n    className: cx(className, (_cx = {}, _cx[selectedClassName] = selected, _cx[disabledClassName] = disabled, _cx)),\n    ref: function ref(node) {\n      nodeRef.current = node;\n      if (tabRef) tabRef(node);\n    },\n    role: \"tab\",\n    id: id,\n    \"aria-selected\": selected ? 'true' : 'false',\n    \"aria-disabled\": disabled ? 'true' : 'false',\n    \"aria-controls\": panelId,\n    tabIndex: tabIndex || (selected ? '0' : null),\n    \"data-rttab\": true\n  }), children);\n};\n\nTab.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nTab.tabsRole = 'Tab';\nTab.defaultProps = DEFAULT_PROPS;\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}